knitr::opts_chunk$set(echo = TRUE)
# load data
stock_data <- read.csv("out.csv")
# load data
stock_data <- read.csv("../Data Collection/out.csv")
View(stock_data)
# load data
stock_data <- read.csv("../Data Collection/out.csv")
stock_data <- na.omit(stock_data)
knitr::opts_chunk$set(echo = TRUE)
# load data
stock_data <- read.csv("../Data Collection/out.csv")
stock_data <- na.omit(stock_data)
View(stock_data)
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(xgboost)
install.packages("quantmod")
install.packages("quantmod")
install.packages("xgboost")
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(xgboost)
getStockData <- function(symbol, startDate, endDate) {
stockData <- getSymbols(symbol, src = "yahoo", from = startDate, to = endDate, auto.assign = FALSE)
stockData <- Ad(stockData)  # Adjusted close price
return(stockData)
}
stockSymbol <- "AAPL"
startDate <- "2020-01-01"
endDate <- "2021-12-31"
# Get historical stock price data
stockData <- getStockData(stockSymbol, startDate, endDate)
View(stockData)
# Feature Engineering: Calculate technical indicators
stockData$SMA <- SMA(Cl(stockData), n = 20)  # 20-day Simple Moving Average
# Feature Engineering: Calculate technical indicators
stock_data$SMA <- SMA(Cl(stockData), n = 20)  # 20-day Simple Moving Average
# Feature Engineering: Calculate technical indicators
stock_data$SMA <- SMA(Cl(stock_data), n = 20)  # 20-day Simple Moving Average
stock_data$RSI <- RSI(Cl(stock_data), n = 14)  # 14-day Relative Strength Index
View(stock_data)
# load data collected from twelvedata
stock_data <- read.csv("../Data Collection/out.csv")
stock_data <- na.omit(stock_data)
# alternative way of data collection through r package
# more testing needed
getStockData <- function(symbol, startDate, endDate) {
stockData <- getSymbols(symbol, src = "yahoo", from = startDate, to = endDate, auto.assign = FALSE)
stockData <- Ad(stockData)  # Adjusted close price
return(stockData)
}
stockSymbol <- "AAPL"
startDate <- "2020-01-01"
endDate <- "2021-12-31"
# Get historical stock price data
stockData <- getStockData(stockSymbol, startDate, endDate)
# Prepare data for modeling
features <- c("SMA", "RSI")  # Select features
stockData <- na.omit(stockData)  # Remove rows with NA values
X <- stockData[, features]  # Independent variables
# Prepare data for modeling
features <- c("SMA", "RSI")  # Select features
stock_data <- na.omit(stock_data)  # Remove rows with NA values
X <- stock_data[, features]  # Independent variables
# Feature Engineering: Calculate technical indicators
stock_data$SMA <- SMA(Cl(stock_data), n = 20)  # 20-day Simple Moving Average
stock_data$RSI <- RSI(Cl(stock_data), n = 14)  # 14-day Relative Strength Index
# Prepare data for modeling
features <- c("SMA", "RSI")  # Select features
stock_data <- na.omit(stock_data)  # Remove rows with NA values
X <- stock_data[, features]  # Independent variables
y <- Lag(Cl(stock_data), k = -1)  # Lagged dependent variable (next day's closing price)
# Prepare data for modeling
features <- c("SMA", "RSI")  # Select features
stock_data <- na.omit(stock_data)  # Remove rows with NA values
X <- stock_data[, features]  # Independent variables
y <- Lag(Cl(stock_data), k = -1)  # Lagged dependent variable (next day's closing price)
# alternative way of data collection through r package
# more testing needed
getStockData <- function(symbol, startDate, endDate) {
stockData <- getSymbols(symbol, src = "yahoo", from = startDate, to = endDate, auto.assign = FALSE)
stockData <- Ad(stockData)  # Adjusted close price
return(stockData)
}
stockSymbol <- "AAPL"
startDate <- "2020-01-01"
endDate <- "2021-12-31"
# Get historical stock price data
stockData <- getStockData(stockSymbol, startDate, endDate)
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(xgboost)
library(dplyr)
# Prepare data for modeling
stock_data <- na.omit(stock_data)
X <- stock_data
# current problem, error saying lag canot
y <- Lag(Cl(stock_data), k = -1)  # Lagged dependent variable (next day's closing price)
# Prepare data for modeling
stock_data <- na.omit(stock_data)
X <- stock_data
# current problem, error saying lag canot
y <- lag(Cl(stock_data), k = -1)  # Lagged dependent variable (next day's closing price)
# Prepare data for modeling
stock_data <- na.omit(stock_data)
X <- stock_data
data_lagged <- stock_data %>%
mutate(
lagged_value = lag(Cl(stock_data), k = -2)
)
# Prepare data for modeling
stock_data <- na.omit(stock_data)
X <- stock_data
y <- lead(Cl(stock_data), default = NA)  # Lagged dependent variable (next day's closing price)
# Split data into training and testing sets
trainSize <- floor(0.8 * nrow(X))
X_train <- X[1:trainSize, ]
X_test <- X[(trainSize + 1):nrow(X), ]
y_train <- y[1:trainSize]
y_test <- y[(trainSize + 1):nrow(y)]
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(xgboost)
library(dplyr)
# load data collected from twelvedata
stock_data <- read.csv("../Data Collection/out.csv")
# alternative way of data collection through r package
# more testing needed
getStockData <- function(symbol, startDate, endDate) {
stockData <- getSymbols(symbol, src = "yahoo", from = startDate, to = endDate, auto.assign = FALSE)
stockData <- Ad(stockData)  # Adjusted close price
return(stockData)
}
stockSymbol <- "AAPL"
startDate <- "2020-01-01"
endDate <- "2021-12-31"
# Get historical stock price data
stockData <- getStockData(stockSymbol, startDate, endDate)
# Feature Engineering: Calculate technical indicators
stock_data$SMA <- SMA(Cl(stock_data), n = 20)  # 20-day Simple Moving Average
stock_data$RSI <- RSI(Cl(stock_data), n = 14)  # 14-day Relative Strength Index
# Prepare data for modeling
stock_data <- na.omit(stock_data)
X <- stock_data
y <- lead(Cl(stock_data), default = NA)  # Lagged dependent variable (next day's closing price)
# Split data into training and testing sets
trainSize <- floor(0.8 * nrow(X))
X_train <- X[1:trainSize, ]
X_test <- X[(trainSize + 1):nrow(X), ]
y_train <- y[1:trainSize]
y_test <- y[(trainSize + 1):nrow(y)]
# Prepare data for modeling
stock_data <- na.omit(stock_data)
X <- stock_data
y <- lead(Cl(stock_data), default = NA)  # Lagged dependent variable (next day's closing price)
# Split data into training and testing sets
trainSize <- floor(0.8 * nrow(X))
X_train <- X[1:trainSize, ]
X_test <- X[(trainSize + 1):nrow(X), ]
y_train <- y[1:trainSize]
y_test <- y[(trainSize + 1):nrow(y), ]
row(y)
nrow(y)
# analyze feature importance
ncol(y)
# analyze feature importance
nrow(y)
# analyze feature importance
length(y)
# analyze feature importance
# Prepare data for modeling
stock_data <- na.omit(stock_data)
X <- stock_data
y <- lead(Cl(stock_data), default = NA)  # Lagged dependent variable (next day's closing price)
# Split data into training and testing sets
trainSize <- floor(0.8 * nrow(X))
X_train <- X[1:trainSize, ]
X_test <- X[(trainSize + 1):nrow(X), ]
y_train <- y[1:trainSize]
y_test <- y[(trainSize + 1):length(y)]
# analyze feature importance
install.packages("xgboost")
install.packages("xgboost")
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(xgboost)
library(dplyr)
data_train <- xgb.DMatrix(data = as.matrix(X_train), label = y_train)
View(X_train)
data_train <- xgb.DMatrix(data = X_train, label = y_train)
data_train <- xgb.DMatrix(data = as.matrix(X), label = y_train)
# Prepare dataset for modeling
stock_data <- na.omit(stock_data)
X <- stock_data
y <- lead(Cl(stock_data), default = NA)  # Lagged dependent variable (next day's closing price)
# Split data into training and testing sets
trainSize <- floor(0.8 * nrow(X))
X_train <- X[1:trainSize, ]
X_test <- X[(trainSize + 1):nrow(X), ]
y_train <- y[1:trainSize]
y_test <- y[(trainSize + 1):length(y)]
data_train <- xgb.DMatrix(data = as.matrix(X_train), label = y_train)
# Prepare dataset for modeling
stock_data <- na.omit(stock_data)
X <- stock_data
y <- lead(Cl(stock_data), default = NA)  # Lagged dependent variable (next day's closing price)
# Split data into training and testing sets
trainSize <- floor(0.8 * nrow(X))
X_train <- X[1:trainSize, ]
X_test <- X[(trainSize + 1):nrow(X), 2:ncol(X)]
y_train <- y[1:trainSize]
y_test <- y[(trainSize + 1):length(y)]
data_train <- xgb.DMatrix(data = as.matrix(X_train), label = y_train)
data_train <- xgb.DMatrix(data = as.matrix(X_train), label = y_train)
as.matrix(X_train)
# analyze feature importance
data_train <- xgb.DMatrix(data = as.matrix(as.numaric(X_train)), label = y_train)
data_train <- xgb.DMatrix(data = as.matrix(numaric(X_train)), label = y_train)
data_train <- xgb.DMatrix(data = as.matrix(as.numeric(X_train)), label = y_train)
as.numeric(as.matrix(X_train))
# analyze feature importance
numeric(as.matrix(X_train))
(as.matrix(X_train))
# analyze feature importance
# Prepare dataset for modeling
stock_data <- na.omit(stock_data)
X <- stock_datac[, c(-"datetime")]
# Prepare dataset for modeling
stock_data <- na.omit(stock_data)
X <- stock_data[, c(-"datetime")]
# Prepare dataset for modeling
stock_data <- na.omit(stock_data)
X <- stock_data[, -c("datetime")]
# Prepare dataset for modeling
stock_data <- na.omit(stock_data)
X <- stock_data[, 2:ncol(stock_data)]
y <- lead(Cl(stock_data), default = NA)  # Lagged dependent variable (next day's closing price)
# Split data into training and testing sets
trainSize <- floor(0.8 * nrow(X))
X_train <- X[1:trainSize, ]
X_test <- X[(trainSize + 1):nrow(X), ]
y_train <- y[1:trainSize]
y_test <- y[(trainSize + 1):length(y)]
View(stock_data)
# Prepare dataset for modeling
stock_data <- na.omit(stock_data)
X <- stock_data[, 1:ncol(stock_data)]
y <- lead(Cl(stock_data), default = NA)  # Lagged dependent variable (next day's closing price)
# Split data into training and testing sets
trainSize <- floor(0.8 * nrow(X))
X_train <- X[1:trainSize, ]
X_test <- X[(trainSize + 1):nrow(X), ]
y_train <- y[1:trainSize]
y_test <- y[(trainSize + 1):length(y)]
View(X)
# Prepare dataset for modeling
stock_data <- na.omit(stock_data)
X <- stock_data[, 2:ncol(stock_data)]
y <- lead(Cl(stock_data), default = NA)  # Lagged dependent variable (next day's closing price)
# Split data into training and testing sets
trainSize <- floor(0.8 * nrow(X))
X_train <- X[1:trainSize, ]
X_test <- X[(trainSize + 1):nrow(X), ]
y_train <- y[1:trainSize]
y_test <- y[(trainSize + 1):length(y)]
View(X)
data_train <- xgb.DMatrix(data = as.matrix(as.numeric(X_train)), label = y_train)
data_train <- xgb.DMatrix(data = as.matrix(X_train), label = y_train)
params <- list(
objective = "reg:squarederror",
eval_metric = "rmse"
)
# create model
xgboost_model <- xgb.train(params = params, data = data_train, nrounds = 100)
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
importance_matrix <- xgb.importance(model = xgboost_model)
print(importance_matrix)
# analyze feature importance
# predict test data
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
# analyze feature importance
importance_matrix <- xgb.importance(model = xgboost_model)
print(importance_matrix)
# analyze feature importance
importance_matrix <- xgb.importance(model = xgboost_model)
print(importance_matrix)
install.packages("SHAPforxgboost")
install.packages("SHAPforxgboost")
install.packages("SHAPforxgboost")
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(xgboost)
library(dplyr)
library(SHAPforxgboost)
library(SHAPforxgboost)
install.packages("SHAPforxgboost")
install.packages("SHAPforxgboost")
install.packages("SHAPforxgboost")
install.packages("SHAPforxgboost")
install.packages("SHAPforxgboost")
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(xgboost)
library(dplyr)
library(SHAPforxgboost)
# analyze feature importance
importance_matrix <- xgb.importance(model = xgboost_model)
print(importance_matrix)
shap_values <- shap.values(xgb_model = xgboost_model, X_train = X_train)
mod <- xgboost::xgboost(data = dataX, label = as.matrix(dataXY_df[[y_var]]),
params = params, nrounds = 200,
verbose = FALSE,
early_stopping_rounds = 8)
mod <- xgboost::xgboost(data = X_train, label = Y_train,
params = params, nrounds = 200,
verbose = FALSE,
early_stopping_rounds = 8)
mod <- xgboost::xgboost(data = X_train, label = y_train,
params = params, nrounds = 200,
verbose = FALSE,
early_stopping_rounds = 8)
mod <- xgboost::xgboost(data = as.matrix(X_train), label = y_train,
params = params, nrounds = 200,
verbose = FALSE,
early_stopping_rounds = 8)
shap_values <- shap.values(xgb_model = xgboost_model, X_train = X_train)
mod <- xgboost::xgboost(data = as.matrix(X_train), label = y_train,
params = params, nrounds = 200,
verbose = FALSE,
early_stopping_rounds = 8)
shap_values <- shap.values(xgb_model = xgboost_model, X_train = as.matrix(X_train))
shap_values <- shap.values(xgb_model = xgboost_model, X_train = as.matrix(X_train))
shap_values$mean_shap_score
shap_values <- shap.values(xgb_model = xgboost_model, X_train = as.matrix(X_train))
shap_values$mean_shap_score
shap_long <- shap.prep(xgb_model = mod, X_train = as.matrix(X_train))
shap.plot.summary.wrap2(shap_values$shap_score, dataX)
shap_values <- shap.values(xgb_model = xgboost_model, X_train = as.matrix(X_train))
shap_values$mean_shap_score
shap_long <- shap.prep(xgb_model = mod, X_train = as.matrix(X_train))
shap.plot.summary.wrap2(shap_values$shap_score, as.matrix(X_train))
# Calculate and visualize SHAP score for each feature
shap_values <- shap.values(xgb_model = xgboost_model, X_train = as.matrix(X_train))
shap_long <- shap.prep(xgb_model = mod, X_train = as.matrix(X_train))
shap.plot.summary.wrap2(shap_values$shap_score, as.matrix(X_train))
# Calculate and visualize SHAP score for each feature
shap_values <- shap.values(xgb_model = xgboost_model, X_train = as.matrix(X_train))
shap.plot.summary.wrap(shap_values$shap_score, as.matrix(X_train))
# Calculate and visualize SHAP score for each feature
shap_values <- shap.values(xgb_model = xgboost_model, X_train = as.matrix(X_train))
shap.plot.summary.wrap2(shap_values$shap_score, as.matrix(X_train))
# predict test data
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
mse <- mean((y_pred - y_test)^2)
rmse <- sqrt(mse)
rmse
# predict test data
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
mse <- mean((y_pred - y_test)^2)
rmse <- sqrt(mse)
y_pred - y_test
# predict test data
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
mse <- mean((y_pred - y_test)^2)
rmse <- sqrt(mse)
mean((y_pred - y_test)^2)
# predict test data
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
mse <- mean((y_pred - y_test)^2)
rmse <- sqrt(mse)
(y_pred - y_test)^2
# predict test data
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
mse <- mean(as.numeric((y_pred - y_test)^2))
rmse <- sqrt(mse)
# predict test data
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
mse <- mean(as.numeric((y_pred - y_test)^2))
rmse <- sqrt(mse)
as.numeric((y_pred - y_test)^2)
# predict test data
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
mse <- mean(as.numeric((y_pred - y_test)^2))
rmse <- sqrt(mse)
na.omit((y_pred - y_test)^2)
# predict test data
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
mse <- mean(na.omit((y_pred - y_test)^2))
rmse <- sqrt(mse)
# predict test data
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
mae <- mean(na.omit(abs(y_pred - y_test)))
mae
# predict test data
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
mae <- mean(na.omit(abs(y_pred - y_test)))
mae
# predict test data
dtest <- xgb.DMatrix(data = as.matrix(X_test))
y_pred <- predict(xgboost_model, dtest)
mae <- mean(na.omit(abs(y_pred - y_test)))
cat("This XGBoost model yields an MAE of:", mae)
summarise(y)
summarise(na.omit(y))
summarise(as.numeric(na.omit(y)))
y
(na.omit(y))
summarise(na.omit(y))
summery(na.omit(y))
summary(na.omit(y))
